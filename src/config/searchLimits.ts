// Configura칞칚o de limites de busca por p치gina
export interface SearchLimitsConfig {
  default: number
  all: number
  artist: number
  album: number
  track: number
  playlist: number
  show: number
  episode: number
  audiobook: number
}

// Limites padr칚o para cada contexto
export const SEARCH_LIMITS: SearchLimitsConfig = {
  default: 20, // Limite padr칚o para buscas individuais
  all: 5, // Limite quando "tudo" est치 selecionado
  artist: 20, // Limite espec칤fico para artistas
  album: 10, // Limite espec칤fico para 치lbuns
  track: 20, // Limite espec칤fico para m칰sicas
  playlist: 20, // Limite espec칤fico para playlists
  show: 20, // Limite espec칤fico para shows
  episode: 20, // Limite espec칤fico para epis칩dios
  audiobook: 20, // Limite espec칤fico para audiobooks
}

// Configura칞칚o espec칤fica para mobile
export const MOBILE_SEARCH_LIMITS: SearchLimitsConfig = {
  default: 15, // Limite menor para mobile
  all: 4, // 4 de cada tipo quando "tudo" est치 selecionado
  artist: 15, // Menos artistas
  album: 10, // 10 치lbuns
  track: 15, // Menos m칰sicas
  playlist: 12, // Menos playlists
  show: 10, // Menos shows
  episode: 8, // Menos epis칩dios
  audiobook: 6, // Menos audiobooks
}

// Configura칞칚o espec칤fica para desktop
export const DESKTOP_SEARCH_LIMITS: SearchLimitsConfig = {
  default: 20, // Limite padr칚o para buscas individuais
  all: 5, // 5 de cada tipo quando "tudo" est치 selecionado
  artist: 20, // 20 artistas
  album: 10, // 10 치lbuns
  track: 20, // 20 m칰sicas
  playlist: 20, // 20 playlists
  show: 15, // 15 shows
  episode: 12, // 12 epis칩dios
  audiobook: 10, // 10 audiobooks
}

// Fun칞칚o para obter o limite baseado no tipo de busca
export function getSearchLimit(
  types: string[],
  config: SearchLimitsConfig = SEARCH_LIMITS,
): number {
  // Se todos os tipos est칚o selecionados, usa o limite "all"
  if (types.length === 7) {
    return config.all
  }

  // Se apenas um tipo est치 selecionado, usa o limite padr칚o (n칚o o espec칤fico)
  if (types.length === 1) {
    return config.default
  }

  // Para m칰ltiplos tipos (mas n칚o todos), usa o limite padr칚o
  return config.default
}

// Fun칞칚o para obter o limite baseado no tipo espec칤fico
export function getLimitByType(
  type: string,
  config: SearchLimitsConfig = SEARCH_LIMITS,
): number {
  // Mapeamento direto dos tipos para as chaves da configura칞칚o
  const typeMapping: Record<string, keyof SearchLimitsConfig> = {
    artist: 'artist',
    album: 'album',
    track: 'track',
    playlist: 'playlist',
    show: 'show',
    episode: 'episode',
    audiobook: 'audiobook',
  }

  const configKey = typeMapping[type]
  const limit = configKey ? config[configKey] : config.default

  // Debug logs
  console.log('游늵 getLimitByType Debug:', {
    type,
    configKey,
    config,
    limit,
    availableKeys: Object.keys(config),
    typeMapping,
  })

  return limit
}

// Fun칞칚o para obter a configura칞칚o baseada no dispositivo
export function getDeviceBasedConfig(): SearchLimitsConfig {
  if (typeof window === 'undefined') {
    return SEARCH_LIMITS // Fallback para SSR
  }

  const isMobile = window.innerWidth < 768
  return isMobile ? MOBILE_SEARCH_LIMITS : DESKTOP_SEARCH_LIMITS
}

// Fun칞칚o para obter o limite baseado no tipo de busca e dispositivo
export function getSearchLimitWithDevice(types: string[]): number {
  const config = getDeviceBasedConfig()

  // Se todos os tipos est칚o selecionados, usa o limite "all" do dispositivo
  if (types.length === 7) {
    return config.all
  }

  // Para tipos espec칤ficos, usa o limite espec칤fico do tipo
  if (types.length === 1) {
    const type = types[0]
    return getLimitByType(type, config)
  }

  // Para m칰ltiplos tipos (mas n칚o todos), usa o limite padr칚o
  return config.default
}
